// Code generated by counterfeiter. DO NOT EDIT.
package concoursefakes

import (
	"sync"

	"github.com/zankich/concourse-visualizer/concourse"
)

type FakeTokenProvider struct {
	GetAuthorizationHeaderStub        func() (string, error)
	getAuthorizationHeaderMutex       sync.RWMutex
	getAuthorizationHeaderArgsForCall []struct{}
	getAuthorizationHeaderReturns     struct {
		result1 string
		result2 error
	}
	getAuthorizationHeaderReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenProvider) GetAuthorizationHeader() (string, error) {
	fake.getAuthorizationHeaderMutex.Lock()
	ret, specificReturn := fake.getAuthorizationHeaderReturnsOnCall[len(fake.getAuthorizationHeaderArgsForCall)]
	fake.getAuthorizationHeaderArgsForCall = append(fake.getAuthorizationHeaderArgsForCall, struct{}{})
	fake.recordInvocation("GetAuthorizationHeader", []interface{}{})
	fake.getAuthorizationHeaderMutex.Unlock()
	if fake.GetAuthorizationHeaderStub != nil {
		return fake.GetAuthorizationHeaderStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAuthorizationHeaderReturns.result1, fake.getAuthorizationHeaderReturns.result2
}

func (fake *FakeTokenProvider) GetAuthorizationHeaderCallCount() int {
	fake.getAuthorizationHeaderMutex.RLock()
	defer fake.getAuthorizationHeaderMutex.RUnlock()
	return len(fake.getAuthorizationHeaderArgsForCall)
}

func (fake *FakeTokenProvider) GetAuthorizationHeaderReturns(result1 string, result2 error) {
	fake.GetAuthorizationHeaderStub = nil
	fake.getAuthorizationHeaderReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) GetAuthorizationHeaderReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetAuthorizationHeaderStub = nil
	if fake.getAuthorizationHeaderReturnsOnCall == nil {
		fake.getAuthorizationHeaderReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAuthorizationHeaderReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthorizationHeaderMutex.RLock()
	defer fake.getAuthorizationHeaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ concourse.TokenProvider = new(FakeTokenProvider)
